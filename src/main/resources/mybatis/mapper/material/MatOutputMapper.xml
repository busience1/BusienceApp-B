<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	 
<mapper namespace="com.busience.material.dao.MatOutputDao">
	<select id="LotMasterSelectDao" resultType="com.busience.material.dto.LotMasterDto">
		SELECT
			A.LM_LotNo, A.LM_ItemCode, A.LM_Qty,
		    A.LM_Create_Date, B.InMat_Client_Code LM_ClientCode,
		    C.Cus_Name LM_ClientName
		FROM LotMaster_tbl A
		INNER JOIN InMat_tbl B ON A.LM_LotNo = B.InMat_Lot_No and InMat_No = '1'
		INNER JOIN Customer_tbl C ON B.InMat_Client_Code = C.Cus_Code
		INNER JOIN DTL_TBL D ON B.InMat_Rcv_Clsfc = D.Child_TBL_No and D.New_TBL_Code = '17'
		where A.LM_Qty != 0
		and A.LM_ItemCode = #{ItemCode};
	</select>
	
	<insert id="LotMasterInsertDao">
		insert into LotMaster_tbl(
			LM_LotNo, LM_ItemCode,
			LM_Qty, LM_Create_Date, LM_WareHouse
		)values(
			#{OM_LotNo}, #{OM_ItemCode},
			#{OM_Qty}, now(), #{OM_WareHouse}
		)on duplicate key update
		LM_Qty = LM_Qty + #{OM_Qty}
	</insert>
	
	<update id="LotMasterUpdateDao">
		update LotMaster_tbl
		set
		LM_Qty = LM_Qty - #{OM_Qty}
		where LM_LotNo = #{OM_LotNo}
	</update>
	
	<select id="LotTransNoSelectDao" resultType="int">
		select ifnull(max(LT_No)+1,1)
		from LotTrans_tbl
		where LT_LotNo = #{OM_LotNo}
	</select>
	
	<insert id="LotTransInsertDao">
		insert into LotTrans_tbl (
			LT_No, LT_LotNo, LT_ItemCode,
			LT_Qty, LT_Before, LT_After, LT_Create_Date,
			LT_Classify
		) values(
			#{OM_No}, #{OM_LotNo}, #{OM_ItemCode},
			#{OM_Qty}, #{OM_Before}, #{OM_After}, now(),
			#{OM_Send_Clsfc}
		)
	</insert>
		
	<insert id="OutMatInsertDao">
		insert into OutMat_tbl(
			OM_No,
			OM_RequestNo, OM_LotNo,
			OM_ItemCode, OM_Qty, OM_DeptCode,
			OM_Send_Clsfc, OM_OutDate, OM_Modifier
		) values (
			(select ifnull(max(AA.OM_No)+1,1) from OutMat_tbl AS AA where AA.OM_RequestNo = #{OM_RequestNo}),
			#{OM_RequestNo}, #{OM_LotNo},
			#{OM_ItemCode}, #{OM_Qty}, #{OM_DeptCode},
			#{OM_Send_Clsfc}, now(), #{OM_Modifier}
		)
	</insert>
	
	<update id="RequestSubUpdateDao">
		update RequestSub_tbl
		set
		RS_Sum = RS_Sum + #{OM_Qty},
		RS_Not_Stocked = RS_Not_Stocked - #{OM_Qty}
		where RS_RequestNo = #{OM_RequestNo}
		and RS_ItemCode = #{OM_ItemCode}
	</update>
	
	<insert id="StockInsertDao">
		insert into Stock_tbl(
			S_itemCode, S_Qty, S_WareHouse
		)values(
			#{OM_ItemCode}, #{OM_Qty}, #{OM_WareHouse}
		)on duplicate key update
		S_Qty = S_Qty + #{OM_Qty}
	</insert>
	
	<update id="StockUpdateDao">
		update Stock_tbl
		set
		S_Qty = S_Qty - #{OM_Qty}
		where S_itemCode = #{OM_ItemCode}
		and S_WareHouse = #{OM_WareHouse}
	</update>
	
	<update id="RequestMasterUpdateDao">
		update RequestMaster_tbl
		set RM_Check = 
			(select 
				(case
					when sum(RS_Qty) = sum(RS_Sum) then 'Y'
					when sum(RS_Sum) = 0 then 'N'
					else 'I'
				end)
				from RequestSub_tbl
				where RS_RequestNo = #{OM_RequestNo}
			)
		where RM_RequestNo = #{OM_RequestNo}
	</update>
	
	<select id="matOutputListDao" resultType="com.busience.material.dto.OutMatDto">
		select 
			A.OM_No, A.OM_RequestNo, A.OM_LotNo,
		    A.OM_ItemCode, B.Product_Item_Name OM_ItemName,
		    B.Product_Info_STND_1 OM_Item_Stnd_1, B.Product_Info_STND_2 OM_Item_Stnd_2,
		    B.Product_Item_CLSFC_1 OM_Item_CLSFC_1, E.Child_TBL_Type OM_Item_CLSFC_1_Name,
		    B.Product_Item_CLSFC_2 OM_Item_CLSFC_2, F.Child_TBL_Type OM_Item_CLSFC_2_Name,
		    A.OM_Qty, A.OM_DeptCode, C.Child_TBL_Type OM_DeptName,
		    A.OM_Send_Clsfc, D.Child_TBL_Type OM_Send_Clsfc_Name,
		    A.OM_OutDate, A.OM_Create_Date, A.OM_Modifier
		from OutMat_tbl A
		inner join Product_Info_tbl B on A.OM_ItemCode = B.Product_Item_Code
		inner join DTL_TBL C on A.OM_DeptCode = C.Child_TBL_No
		inner join DTL_TBL D on A.OM_Send_Clsfc = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Item_CLSFC_1 = E.Child_TBL_No
		inner join DTL_TBL F on B.Product_Item_CLSFC_2 = F.Child_TBL_No
		<![CDATA[
			where A.OM_OutDate >= #{startDate} and A.OM_OutDate < #{endDate}
		]]>
		and A.OM_ItemCode like concat('%',#{ItemCode},'%') and A.OM_DeptCode like concat('%',#{DeptCode},'%')
		<if test="ItemSendClsfc != 'all'">
			and A.OM_Send_Clsfc = #{ItemSendClsfc}
		</if>
		order by A.OM_OutDate
	</select>
	
	<select id="matOutputOtherListDao" resultType="com.busience.material.dto.OutMatDto">
		select 
			A.OM_No, A.OM_RequestNo, A.OM_LotNo,
		    A.OM_ItemCode, B.Product_Item_Name OM_ItemName,
		    B.Product_Info_STND_1 OM_Item_Stnd_1, B.Product_Info_STND_2 OM_Item_Stnd_2,
		    B.Product_Item_CLSFC_1 OM_Item_CLSFC_1, E.Child_TBL_Type OM_Item_CLSFC_1_Name,
		    B.Product_Item_CLSFC_2 OM_Item_CLSFC_2, F.Child_TBL_Type OM_Item_CLSFC_2_Name,
		    sum(A.OM_Qty) OM_Qty, A.OM_DeptCode, C.Child_TBL_Type OM_DeptName,
		    A.OM_Send_Clsfc, D.Child_TBL_Type OM_Send_Clsfc_Name,
		    A.OM_OutDate, A.OM_Create_Date, A.OM_Modifier
		from OutMat_tbl A
		inner join Product_Info_tbl B on A.OM_ItemCode = B.Product_Item_Code
		inner join DTL_TBL C on A.OM_DeptCode = C.Child_TBL_No
		inner join DTL_TBL D on A.OM_Send_Clsfc = D.Child_TBL_No
		inner join DTL_TBL E on B.Product_Item_CLSFC_1 = E.Child_TBL_No
		inner join DTL_TBL F on B.Product_Item_CLSFC_2 = F.Child_TBL_No
		<![CDATA[
			where A.OM_OutDate >= #{startDate} and A.OM_OutDate < #{endDate}
		]]>
		<if test="ItemSendClsfc != 'all'">
			and A.OM_Send_Clsfc = #{ItemSendClsfc}
		</if>
		<if test="ItemCode != null">
			and A.OM_ItemCode like concat('%',#{ItemCode},'%')
			group by A.OM_ItemCode, A.OM_DeptCode with rollup
		</if>
		<if test="DeptCode != null">
			and A.OM_DeptCode like concat('%',#{DeptCode},'%')
			group by A.OM_DeptCode, A.OM_ItemCode with rollup
		</if>
	</select>
	
	<select id="matOutputDeliveryMasterDao" resultType="com.busience.material.dto.OutMatDto">
		select 
			A.OM_RequestNo, A.OM_LotNo, A.OM_No, A.OM_ItemCode,
			sum(A.OM_Qty) OM_Qty, A.OM_DeptCode, B.Child_TBL_Type OM_DeptName,
            A.OM_OutDate, A.OM_Send_Clsfc
		from OutMat_tbl A 
		inner join DTL_TBL B on A.OM_DeptCode = B.Child_TBL_No 
		<![CDATA[
			where A.OM_OutDate >= #{startDate} and A.OM_OutDate < #{endDate}
		]]>
			group by A.OM_DeptCode
	</select>
	
	<select id="matOutputDeliverySubDao" resultType="com.busience.material.dto.OutMatDto">
		select 
			A.OM_No, A.OM_OutDate, E.CHILD_TBL_TYPE OM_Send_Clsfc_Name,
            A.OM_DeptCode, A.OM_ItemCode, B.PRODUCT_ITEM_NAME OM_ItemName,
			B.PRODUCT_INFO_STND_1 OM_Item_Stnd_1, B.PRODUCT_INFO_STND_2 OM_Item_Stnd_2,
			B.Product_Item_CLSFC_1 OM_Item_CLSFC_1, E.Child_TBL_Type OM_Item_CLSFC_1_Name,
		    B.Product_Item_CLSFC_2 OM_Item_CLSFC_2, F.Child_TBL_Type OM_Item_CLSFC_2_Name,
			D.CHILD_TBL_TYPE OM_UNIT, A.OM_Qty
		from OutMat_tbl A
		inner join Product_Info_tbl B on A.OM_ItemCode = B.PRODUCT_ITEM_CODE 
		left outer join DTL_TBL C on B.PRODUCT_UNIT = C.CHILD_TBL_NO
		left outer join DTL_TBL D on A.OM_Send_Clsfc = D.CHILD_TBL_NO
		inner join DTL_TBL E on B.Product_Item_CLSFC_1 = E.Child_TBL_No
		inner join DTL_TBL F on B.Product_Item_CLSFC_2 = F.Child_TBL_No
		<![CDATA[
			where A.OM_OutDate >= #{startDate} and A.OM_OutDate < #{endDate}
		]]>
		and A.OM_DeptCode = #{deptCode}
	</select>
	
	<select id="matOutReturnSelectDao" resultType="com.busience.material.dto.OutMatDto">
		select
			A.OM_RequestNo, A.OM_LotNo, A.OM_No,
			B.LM_WareHouse OM_WareHouse, F.Child_TBL_Type OM_WareHouse_Name,
		    A.OM_ItemCode, C.Product_Item_Name OM_ItemName, B.LM_Qty OM_Qty,
		    C.Product_Info_STND_1 OM_Item_Stnd_1, C.Product_Info_STND_2 OM_Item_Stnd_2,
		    A.OM_DeptCode, D.Child_TBL_Type OM_DeptName, A.OM_OutDate,
			A.OM_Send_Clsfc, E.Child_TBL_Type OM_Send_Clsfc_Name    
		FROM OutMat_tbl A
		inner join LotMaster_tbl B on A.OM_LotNo = B.LM_LotNo
		inner join Product_Info_tbl C on A.OM_ItemCode = C.Product_Item_Code
        inner join DTL_TBL D on A.OM_DeptCode = D.Child_TBL_No
        inner join DTL_TBL E on A.OM_Send_Clsfc = E.Child_TBL_No
        inner join DTL_TBL F on B.LM_WareHouse = F.Child_TBL_No and F.Child_TBL_Type != '자재창고'
		where B.LM_Qty > 0
		and A.OM_Send_Clsfc != (select Child_TBL_No from DTL_TBL where New_TBL_Code = 18 and Child_TBL_Type = '출고반품')
	</select>
</mapper>